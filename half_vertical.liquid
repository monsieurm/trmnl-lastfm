<div class="layout layout--col gap--space-between">
  <div class="grid grid">
    <div class="item">
      <div class="meta"></div>
      <div class="content last_track">
        <span class="value value--medium value--tnums"></span>
        <span class="label">Last Track Listened</span>
      </div>
    </div>
  </div>
  <div class="w-full b-h-gray-5"></div>
  <div class="grid grid--cols-2">
    <div class="item">
      <div class="meta"></div>
      <div class="content">
        <span class="value value--xsmall value--tnums playcount"></span>
        <span class="label">Total Scrobbled</span>
      </div>
    </div>
    <div class="item">
      <div class="meta"></div>
      <div class="content">
        <span class="value value--xsmall value--tnums loved_track_count"></span>
        <span class="label">Loved Tracks</span>
      </div>
    </div>
    <div class="item">
      <div class="meta"></div>
      <div class="content">
        <span class="value value--xsmall value--tnums album_count"></span>
        <span class="label">Albums Scrobbled</span>
      </div>
    </div>
    <div class="item">
      <div class="meta"></div>
      <div class="content">
        <span class="value value--xsmall value--tnums artist_count"></span>
        <span class="label">Artists Scrobbled </span>
      </div>
    </div>
    <div class="item">
      <div class="meta"></div>
      <div class="content">
        <span class="value value--xsmall value--tnums track_count"></span>
        <span class="label">Tracks Scrobbled </span>
      </div>
    </div>
  </div>
</div>

<div class="title_bar">
  <svg fill="#000000" width="28px" height="28px" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M8.574 14.576c-.477.348-1.455 1.024-3.381 1.024C2.532 15.6 0 13.707 0 10.195 0 6.547 2.637 4.4 5.354 4.4c3.047 0 4.183 1.108 5.144 4.109l.756 2.309c.551 1.688 1.713 2.91 4.026 2.91 1.558 0 2.382-.346 2.382-1.199 0-.67-.389-1.156-1.557-1.434l-1.559-.369c-1.9-.461-2.656-1.455-2.656-3.025 0-2.516 2.016-3.301 4.077-3.301 2.337 0 3.757.854 3.94 2.932l-2.291.277c-.092-.992-.688-1.408-1.787-1.408-1.008 0-1.627.461-1.627 1.246 0 .693.299 1.109 1.307 1.34l1.466.324c1.97.461 3.025 1.432 3.025 3.303 0 2.309-1.924 3.186-4.766 3.186-3.963 0-5.338-1.801-6.07-4.041L8.43 9.25c-.549-1.687-.99-2.902-3.006-2.902-1.398 0-3.219.916-3.219 3.756 0 2.217 1.523 3.604 3.104 3.604 1.34 0 2.146-.754 2.564-1.131l.701 1.999z"/></svg>
  <span class="title">LastFM</span>
  <span class="instance">last.fm/user/{{ trmnl.plugin_settings.custom_fields_values.username }}</span>
</div>

<script>
  document.addEventListener('DOMContentLoaded', event => {
    const LFMAPIURL = 'https://ws.audioscrobbler.com/2.0/';
    const LFMUSER = `{{ trmnl.plugin_settings.custom_fields_values.username }}`;
    const LFMAPIKEY = `{{ trmnl.plugin_settings.custom_fields_values.api_key }}`;
    const locale = 'en-US';

    /**
    * Converts a Unix timestamp into a readable date
    * @param {number|string} timestamp - The timestamp to convert (can be a number or a string)
    * @returns {string} - The formatted date (e.g., "Monday, March 10, 2025, 2:30 PM")
    */
    function formatTimestamp(timestamp) {
      if (!timestamp) return "Unknown date";

      const ts = Number(timestamp) * 1000;
      if (isNaN(ts)) return "Invalid timestamp";

      const date = new Date(ts);

      return date.toLocaleDateString(locale, {
        weekday: "long", // Day name (e.g., Monday, Tuesday)
        day: "numeric", // Day of the month
        month: "long", // Month name
        year: "numeric", // Year
        hour: "2-digit", // Hour
        minute: "2-digit" // Minutes
      });
    }

    /**
    * Make a request to the Last.fm API with the given parameters
    * @param {string} method - Last.fm API method name
    * @param {Object} params - Additional request parameters
    * @returns {Promise<Object>} - Response JSON data
    */
    async function fetchLFMData(method, params = {}) {
      const url = new URL(LFMAPIURL);
      url.search = new URLSearchParams({
        method,
        user: LFMUSER,
        api_key: LFMAPIKEY,
        format: "json",
        ...params
      }).toString();

      try {
        const response = await fetch(url);
        if (!response.ok) throw new Error(`HTTP Error: ${response.status}`);
        return await response.json();
      } catch (error) {
        console.error(`Error during data recovery for ${method}:`, error);
        return null;
      }
    }

    async function getUserInfo() {
      const data = await fetchLFMData("user.getInfo");

      if (!data?.user) return;

      const { playcount, album_count, artist_count, track_count } = data.user;

      document.querySelector(".playcount").textContent = Number(playcount).toLocaleString(locale) || "N/A";
      document.querySelector(".album_count").textContent = Number(album_count).toLocaleString(locale) || "N/A";
      document.querySelector(".artist_count").textContent = Number(artist_count).toLocaleString(locale) || "N/A";
      document.querySelector(".track_count").textContent = Number(track_count).toLocaleString(locale) || "N/A";
    }

    async function getLastTrack() {
      const data = await fetchLFMData("user.getRecentTracks", { limit: 1 });
      const track = data?.recenttracks?.track?.[0];

      console.log(track);

      if (!track) return;

      document.querySelector(".last_track .value").innerHTML = `${track.name} - ${track.artist["#text"]} - ${track.album["#text"]}`;
      document.querySelector(".last_track .label").textContent = track.date ? `Last track on ${formatTimestamp(track.date.uts)}` : "";
    }

    async function getLovedTracks() {
      const data = await fetchLFMData("user.getlovedtracks", {
        limit: 50,
        page: 1
      });

      document.querySelector(".loved_track_count").textContent = Number(data?.lovedtracks?.["@attr"]?.total).toLocaleString(locale) || "N/A";
    }

    Promise.all([getUserInfo(), getLastTrack(), getLovedTracks()]);
  });
</script>